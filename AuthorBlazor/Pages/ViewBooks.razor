@page "/ViewBooks"
@using AuthorBlazor.Model
@using AuthorBlazor.Data.BookData
@using AuthorBlazor.Data.AuthorData
@inject IAuthorService AuthorService
@inject IBookService BookService
@inject NavigationManager NavMgr


<h1>Book list</h1>

<p>
    Filter by Author's First Name: <input type="text" @oninput="@((arg) => FilterByAuthorsName(arg))"
                              style="width:500px"/>
</p>
<p> Filter by Book Title: <input type="text" @oninput="@((arg) => FilterByBookTitle(arg))"
                                 style="width:500px"/>
</p>

<table class="table">
    <thead>
    <tr>
        <th>Title</th>
        <th>PubYear</th>
        <th>NumOfPages</th>
        <th>AuthorFirstName</th>
        <th>AuthorLastName</th>
        <th>Delete</th>
    </tr>
    </thead>
        
    <tbody>
    @foreach (var author in filteredAuthor)
    {
        @foreach(var book in author.Books)
        {
            <tr>
                <td>@book.Title</td>
                <td>@book.PublicationYear</td>
                <td>@book.NumOfPages</td>
                <td>@author.FirstName</td>
                <td>@author.LastName</td>
                <td>
                    <button @onclick="@(() => RemoveBook(book.ISBN))">
                        <i class="oi-trash" style="color: red"/>
                    </button>
                </td>
            </tr>
        }
    }
    </tbody>
</table>


@code {
    private IList<Author> Authors = new List<Author>();
    private IList<Author> filteredAuthor = new List<Author>();
    
    private IList<Book> allBooks;
    private IList<Book> filteredBooks;

    private string? filterByAuthorsName;
    private string? filterByBookTitle;

    protected override async Task OnInitializedAsync()
    {
        Authors = await AuthorService.GetAuthorsAsync();
        filteredAuthor = Authors;
    }

    private void RemoveBook(int ISBN)
    {
        try
        {
            BookService.DeleteBookAsync(ISBN);
            NavMgr.NavigateTo("/ViewBooks");
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    private void FilterByAuthorsName(ChangeEventArgs evt)
    {
        filterByAuthorsName = null;
        try
        {
            filterByAuthorsName = evt.Value.ToString();
        }
        catch (Exception e){}
        if (filterByAuthorsName != null)
        {
           filteredAuthor = Authors.Where(t => t.FirstName.Equals(filterByAuthorsName)).ToList();
        }
        else
        {
            filteredAuthor = Authors;
        }
    }

    private void FilterByBookTitle(ChangeEventArgs evt)
    {
       filterByBookTitle = null;
        try
        {
            filterByBookTitle = evt.Value.ToString();
        }
        catch(Exception e){}
        if (filterByBookTitle != null)
        {
            filteredBooks = allBooks.Where(t => t.Title.Equals(filterByBookTitle)).ToList();
        }
        else
        {
            filteredBooks = allBooks;
        }
    }
}