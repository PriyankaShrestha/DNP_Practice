@page "/ViewBooks"
@using AuthorBlazor.Model
@using AuthorBlazor.Data.BookData
@using AuthorBlazor.Data.AuthorData
@using System.Runtime.CompilerServices
@inject IAuthorService AuthorService
@inject IBookService BookService
@inject NavigationManager NavMgr


<h1>Book list</h1>

<p>
    Filter by Author's First Name: <input type="text" @oninput="@((arg) => FilterByAuthorsName(arg))"
                              style="width:500px"/>
</p>
<p> Filter by Book Title: <input type="text" @oninput="@((arg) => FilterByBookTitle(arg))"
                                 style="width:500px"/>
</p>

<table class="table">
    <thead>
    <tr>
        <th>Title</th>
        <th>PubYear</th>
        <th>NumOfPages</th>
        <th>AuthorFirstName</th>
        <th>AuthorLastName</th>
        <th>Delete</th>
    </tr>
    </thead>
        
    <tbody>
    @*  @foreach (var author in filteredAuthor)
    {
        @foreach(var book in author.Books)
        {
            <tr>
                <td>@book.Title</td>
                <td>@book.PublicationYear</td>
                <td>@book.NumOfPages</td>
                <td>@author.FirstName</td>
                <td>@author.LastName</td>
                <td>
                    <button @onclick="@(() => RemoveBook(book.ISBN))">
                        <i class="oi-trash" style="color: red"/>
                    </button>
                </td>
            </tr>
        }
    }*@
    @foreach(Book book in filteredBooks)
            {
                <tr>
                    <td>@book.Title</td>
                    <td>@book.PublicationYear</td>
                    <td>@book.NumOfPages</td>
                    <td>@getFirstName(book)</td>
                    <td>@getLastName(book)</td>
                    <td>
                        <button @onclick="@(() => RemoveBook(book.ISBN))">
                            <i class="oi-trash" style="color: red"/>
                        </button>
                    </td>
                </tr>
            }
    </tbody>
</table>


@code {
    // 
    // private IList<Author> filteredAuthor = new List<Author>();
    private IList<Author> Authors = new List<Author>();
    private IList<Book> allBooks = new List<Book>();
    private IList<Book> filteredBooks = new List<Book>();

    private string? filterByAuthorsName;
    private string? filterByBookTitle;

    protected override async Task OnInitializedAsync()
    {
        // Authors = await AuthorService.GetAuthorsAsync();
        // filteredAuthor = Authors;
        allBooks = await BookService.GetBooksAsync();
        filteredBooks = allBooks;
        Authors = await AuthorService.GetAuthorsAsync();
    }

    private string getFirstName(Book book)
    {
        foreach (Author auth in Authors)
        {
            if (auth.Books.FirstOrDefault(b => b.ToString().Equals(book.ToString())) != null)
            {
                return auth.FirstName;
            }
        }
        return "No Author";
    }
    
    private string getLastName(Book book)
    {
        foreach (Author auth in Authors)
        {
            if (auth.Books.FirstOrDefault(b => b.ToString().Equals(book.ToString())) != null)
            {
                return auth.LastName;
            }
        }
        return "No Author";
    }

    private void RemoveBook(int ISBN)
    {
        try
        {
            Book book = allBooks.FirstOrDefault(b => b.ISBN == ISBN);
            BookService.DeleteBookAsync(ISBN);
            allBooks.Remove(book);
            filteredBooks.Remove(book);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    private void FilterByAuthorsName(ChangeEventArgs evt)
    {
        filterByAuthorsName = null;
        IList<Book> books = new List<Book>();
        try
        {
            filterByAuthorsName = evt.Value.ToString();
        }
        catch (Exception e){}
        if (filterByAuthorsName != null)
        {
            foreach (Author author in Authors)
            {
                if (author.FirstName.Contains(filterByAuthorsName))
                {
                    foreach (Book book in author.Books)
                    {
                        books.Add(book);
                    }
                }
            }
            filteredBooks = books;
        }
        else
        {
            filteredBooks = allBooks;
        }
    }

    private async void FilterByBookTitle(ChangeEventArgs evt)
    {
        try
        {
            filterByBookTitle = evt.Value.ToString();
        }
        catch(Exception e){}
        if (filterByBookTitle != null)
        {
            filteredBooks = allBooks.Where(b => b.Title.Contains(filterByBookTitle)).ToList();
        }
        else
        {
            filteredBooks = allBooks;
        }
    }
}